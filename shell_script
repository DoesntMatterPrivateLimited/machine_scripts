
üßæ Linux Environment Variables ‚Äì One Page Summary
üîπ 1. Temporary Environment Variables

    Scope: Current shell/session only

    Command:

    export MY_VAR="TemporaryValue"
    echo $MY_VAR

    Lost when: You close the terminal or reboot.

üîπ 2. Permanent (User-Specific) Variables

    Scope: Only available to the current user, across sessions.

    Files: ~/.bashrc, ~/.bash_profile, or ~/.profile (depending on shell)

üõ† How to set:

    Open .bashrc:

nano ~/.bashrc

Add at the end:

export MY_VAR="MyUserValue"

Apply changes:

    source ~/.bashrc

üîπ 3. Permanent (All Users ‚Äì System-Wide)
‚úÖ Option A: /etc/environment

    Scope: All users, all sessions

    Use for: Simple KEY="value" pairs

    No export needed

sudo nano /etc/environment

# Example:
MY_VAR="GlobalValue"

    Apply: Reboot or log out/in

‚úÖ Option B: /etc/profile or /etc/profile.d/*.sh

    Scope: All users, interactive shells

    Supports: Shell scripting, export, logic

sudo nano /etc/profile.d/myvars.sh

# Add:
export MY_VAR="AnotherGlobalValue"

sudo chmod +x /etc/profile.d/myvars.sh
source /etc/profile.d/myvars.sh

üß™ Check a Variable

echo $MY_VAR
printenv MY_VAR

üí° Shell Scripting Special Variables
Variable	Meaning	Example	Description
$1	First argument	./script.sh foo bar ‚Üí $1 = foo	Refers to the first argument passed to the script
$@	All arguments	./script.sh foo bar ‚Üí $@ = foo bar	Refers to all arguments as separate quoted strings ("$1", "$2"...)
$?	Exit status of last command	After a command: $? = 0 (success) or 1 (failure)	Shows the exit code of the last executed command
$#	Number of arguments	./script.sh foo bar ‚Üí $# = 2	Returns the total number of arguments passed to the script
---
Its shows Vpcs id = aws ec2 describe-vpcs --region ap-south-1 | jq ".Vpcs[].VpcId"
aws ec2 describe-vpcs --region ap-south-1 | jq ".Vpcs[].VpcId" -r
---
#!/bin/bash
REGION='ap-south-1'
aws ec2 describe-vpcs --region ${REGION} | jq ".Vpcs[].VpcId" -r
#!/bin/bash
REGION=$1
aws ec2 describe-vpcs --region ${REGION} | jq ".Vpcs[].VpcId" -r
---
#!/bin/bash
awd --version 2> /dev/null
if [ $? -eq 0 ]; then
        REGION=$1
        aws ec2 describe-vpcs --region ${REGION} | jq ".Vpcs[].VpcId" -r
else
   echo "incorrect command"
fi
---
#!/bin/bash
aws --version 2> /dev/null
if [ $? -eq 0 ]; then
        REGION=$1
        aws ec2 describe-vpcs --region ${REGION} | jq ".Vpcs[].VpcId" -r
else
   echo "incorrect command"
fi
--------------------

error code in shell script 

Exit Code | Meaning | Notes
0 | Success | Command executed successfully
1 | General error | Catch-all for general errors
2 | Misuse of shell builtins | Missing keyword, syntax error, etc.
126 | Command found but not executable | Permissions issue (e.g., no execute permission)
127 | Command not found | Typo or missing software
128 | Invalid argument to exit | E.g., exit 300 gives this since 300 > 255
130 | Script terminated by Ctrl+C | Signal interrupt (SIGINT)
137 | Killed by SIGKILL (kill -9) | Forcefully killed by system or user
139 | Segmentation fault | Crash due to memory access violation

-------------------------------------------------
$@	All arguments	./script.sh foo bar ‚Üí $@ = foo bar	Refers to all arguments as separate quoted strings ("$1", "$2"...)

#!/bin/bash


aws --version


if [ $? -eq 0 ]; then
    REGIONS=$@

    for REGION in $REGIONS; do
        aws ec2 describe-vpcs --region ${REGION} | jq ".Vpcs[].VpcId" -r
    done
else
    echo "Incorrect command"

fi

------------------------------------------------------------------
$#	Number of arguments	./script.sh foo bar ‚Üí $# = 2	Returns the total number of arguments passed to the script

#!/bin/bash

# Check if at least one argument is provided
if [ $# -gt 0 ]; then
    REGIONS=$@
    echo "Fetching VPC IDs for regions: $REGIONS"
    for REGION in $REGIONS; do
        aws ec2 describe-vpcs --region ${REGION} | jq ".Vpcs[].VpcId" -r
    done
else
    echo "You have provided $# arguments. Please provide at least one region."
    exit 1
fi
echo $#
------------------------------------------

#!/bin/bash
for I in {1..100}; do
        if [ $((I % 2)) -eq 0 ]; then
                echo "$I is an even number"
        else
                echo "$I is an odd number"
        fi
done
~                                                                                                                                                                      
~                                                                                                                                                                      
~                                                                                                                                                                      
~                                                                                                                                                                   
$1 = single argument 
$@ = multiple argument
$? = error code
$# = no. of argument show 
-----------------------------------
#!/bin/bash
for I in {1..100}; do
        if [ $((I % 2)) -eq 0 ]; then
                echo "$I is an even number"
        else
                echo "$I is an odd number"
        fi
done
------------------------------------------
üîÅ FOR Loop Examples
‚úÖ Example 1: Print numbers from 1 to 5

#!/bin/bash

for i in {1..5}; do
  echo "Number: $i"
done
-----------------
üßæ Output:

Number: 1
Number: 2
Number: 3
Number: 4
Number: 5
---------------
‚úÖ Example 2: Loop through a list of strings

#!/bin/bash

for fruit in apple banana cherry; do
  echo "Fruit: $fruit"
done
-----------
üßæ Output:

Fruit: apple
Fruit: banana
Fruit: cherry
------------
üîÑ WHILE Loop Examples
‚úÖ Example 1: Print numbers from 1 to 5

#!/bin/bash

i=1

while [ $i -le 5 ]; do
  echo "Count: $i"
  ((i++))
done
----------
üßæ Output:

Count: 1
Count: 2
Count: 3
Count: 4
Count: 5
------------
‚úÖ Example 2: Countdown from 5 to 1
#!/bin/bash

i=5

while [ $i -ge 1 ]; do
  echo "Countdown: $i"
  ((i--))
done
----------
üßæ Output:
Countdown: 5
Countdown: 4
Countdown: 3
Countdown: 2
Countdown: 1
---------------------------------------


